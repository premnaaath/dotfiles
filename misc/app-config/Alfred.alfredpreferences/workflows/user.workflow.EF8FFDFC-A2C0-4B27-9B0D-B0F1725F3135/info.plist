<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.SudoPrem.NotificationDismisser</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>59F529A1-09F5-492B-A0D6-B7180808B960</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>897F4955-18F9-4087-90E1-7B414F0D269E</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>51D1D93C-ADA4-4B25-B6F0-B294C4F34E0F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>A848F611-85BB-405D-A62A-572FD5D0F2AB</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>383F8608-0870-4765-8111-86D6EC9928F2</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>5AF4E8CC-EAC0-4851-B52C-88EE3DCA43A4</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>897F4955-18F9-4087-90E1-7B414F0D269E</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>51D1D93C-ADA4-4B25-B6F0-B294C4F34E0F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>A848F611-85BB-405D-A62A-572FD5D0F2AB</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>383F8608-0870-4765-8111-86D6EC9928F2</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>SudoPrem</string>
	<key>description</key>
	<string>Dismiss notifications</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Notification Dismisser</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>function run(input, parameters) {

  const appName = "";
  const verbose = true;

  const scriptName = "close_notifications_applescript";

  const CLEAR_ALL_ACTION = "Clear All";
  const CLEAR_ALL_ACTION_TOP = "Clear";
  const CLOSE_ACTION = "Close";

  const notNull = (val) =&gt; {
    return val !== null &amp;&amp; val !== undefined;
  }

  const isNull = (val) =&gt; {
    return !notNull(val);
  }

  const isError = (maybeErr) =&gt; {
    return notNull(maybeErr) &amp;&amp; (maybeErr instanceof Error || maybeErr.message);
  }

  const systemVersion = () =&gt; {
    return Application("Finder").version().split(".").map(val =&gt; parseInt(val));
  }

  const systemVersionGreaterThanOrEqualTo = (vers) =&gt; {
    return systemVersion()[0] &gt;= vers;
  }

  const isBigSurOrGreater = () =&gt; {
    return systemVersionGreaterThanOrEqualTo(11);
  }

  const V11_OR_GREATER = isBigSurOrGreater();
  const APP_NAME_MATCHER_ROLE = V11_OR_GREATER ? "AXStaticText" : "AXImage";
  const hasAppName = notNull(appName) &amp;&amp; appName !== "";
  const appNameForLog = hasAppName ? ` [${appName}]` : "";

  const logs = [];
  const log = (message, ...optionalParams) =&gt; {
    let message_with_prefix = `${new Date().toISOString().replace("Z", "").replace("T", " ")} [${scriptName}]${appNameForLog} ${message}`;
    console.log(message_with_prefix, optionalParams);
    logs.push(message_with_prefix);
  }

  const logError = (message, ...optionalParams) =&gt; {
    if (isError(message)) {
      let err = message;
      message = `${err}${err.stack ? (' ' + err.stack) : ''}`;
    }
    log(`ERROR ${message}`, optionalParams);
  }

  const logErrorVerbose = (message, ...optionalParams) =&gt; {
    if (verbose) {
      logError(message, optionalParams);
    }
  }

  const logVerbose = (message) =&gt; {
    if (verbose) {
      log(message);
    }
  }

  const getLogLines = () =&gt; {
    return logs.join("\n");
  }

  const getSystemEvents = () =&gt; {
    let systemEvents = Application("System Events");
    systemEvents.includeStandardAdditions = true;
    return systemEvents;
  }

  const getNotificationCenter = () =&gt; {
    try {
      return getSystemEvents().processes.byName("NotificationCenter");
    } catch (err) {
      logError("Could not get NotificationCenter");
      throw err;
    }
  }

  const getNotificationCenterGroups = (retryOnError = false) =&gt; {
    try {
      let notificationCenter = getNotificationCenter();
      if (notificationCenter.windows.length &lt;= 0) {
        return [];
      }
      if (!V11_OR_GREATER) {
        return notificationCenter.windows();
      }
      return notificationCenter.windows[0].uiElements[0].uiElements[0].uiElements();
    } catch (err) {
      logError("Could not get NotificationCenter groups");
      if (retryOnError) {
        logError(err);
        return getNotificationCenterGroups(false);
      } else {
        throw err;
      }
    }
  }

  const isClearButton = (description, name) =&gt; {
    return description === "button" &amp;&amp; name === CLEAR_ALL_ACTION_TOP;
  }

  const matchesAppName = (role, value) =&gt; {
    return role === APP_NAME_MATCHER_ROLE &amp;&amp; value.toLowerCase() === appName.toLowerCase();
  }

  const notificationGroupMatches = (group) =&gt; {
    try {
      let description = group.description();
      if (V11_OR_GREATER &amp;&amp; isClearButton(description, group.name())) {
        return true;
      }
      if (V11_OR_GREATER &amp;&amp; description !== "group") {
        return false;
      }
      if (!V11_OR_GREATER) {
        let matchedAppName = !hasAppName;
        if (!matchedAppName) {
          for (let elem of group.uiElements()) {
            if (matchesAppName(elem.role(), elem.description())) {
              matchedAppName = true;
              break;
            }
          }
        }
        if (matchedAppName) {
          return notNull(findCloseActionV10(group, -1));
        }
        return false;
      }
      if (!hasAppName) {
        return true;
      }
      let firstElem = group.uiElements[0];
      return matchesAppName(firstElem.role(), firstElem.value());
    } catch (err) {
      logErrorVerbose(`Caught error while checking window, window is probably closed: ${err}`);
      logErrorVerbose(err);
    }
    return false;
  }

  const findCloseActionV10 = (group, closedCount) =&gt; {
    try {
      for (let elem of group.uiElements()) {
        if (elem.role() === "AXButton" &amp;&amp; elem.title() === CLOSE_ACTION) {
          return elem.actions["AXPress"];
        }
      }
    } catch (err) {
      logErrorVerbose(`(group_${closedCount}) Caught error while searching for close action, window is probably closed: ${err}`);
      logErrorVerbose(err);
      return null;
    }
    log("No close action found for notification");
    return null;
  }

  const findCloseAction = (group, closedCount) =&gt; {
    try {
      if (!V11_OR_GREATER) {
        return findCloseActionV10(group, closedCount);
      }
      let checkForPress = isClearButton(group.description(), group.name());
      let clearAllAction;
      let closeAction;
      for (let action of group.actions()) {
        let description = action.description();
        if (description === CLEAR_ALL_ACTION) {
          clearAllAction = action;
          break;
        } else if (description === CLOSE_ACTION) {
          closeAction = action;
        } else if (checkForPress &amp;&amp; description === "press") {
          clearAllAction = action;
          break;
        }
      }
      if (notNull(clearAllAction)) {
        return clearAllAction;
      } else if (notNull(closeAction)) {
        return closeAction;
      }
    } catch (err) {
      logErrorVerbose(`(group_${closedCount}) Caught error while searching for close action, window is probably closed: ${err}`);
      logErrorVerbose(err);
      return null;
    }
    log("No close action found for notification");
    return null;
  }

  const closeNextGroup = (groups, closedCount) =&gt; {
    try {
      for (let group of groups) {
        if (notificationGroupMatches(group)) {
          let closeAction = findCloseAction(group, closedCount);

          if (notNull(closeAction)) {
            try {
              closeAction.perform();
              return [true, 1];
            } catch (err) {
              logErrorVerbose(`(group_${closedCount}) Caught error while performing close action, window is probably closed: ${err}`);
              logErrorVerbose(err);
            }
          }
          return [true, 0];
        }
      }
      return false;
    } catch (err) {
      logError("Could not run closeNextGroup");
      throw err;
    }
  }

  try {
    let groupsCount = getNotificationCenterGroups(true).filter(group =&gt; notificationGroupMatches(group)).length;

    if (groupsCount &gt; 0) {
      logVerbose(`Closing ${groupsCount}${appNameForLog} notification group${(groupsCount &gt; 1 ? "s" : "")}`);

      let startTime = new Date().getTime();
      let closedCount = 0;
      let maybeMore = true;
      let maxAttempts = 2;
      let attempts = 1;
      while (maybeMore &amp;&amp; ((new Date().getTime() - startTime) &lt;= (1000 * 30))) {
        try {
          let closeResult = closeNextGroup(getNotificationCenterGroups(), closedCount);
          maybeMore = closeResult[0];
          if (maybeMore) {
            closedCount = closedCount + closeResult[1];
          }
        } catch (innerErr) {
          if (maybeMore &amp;&amp; closedCount === 0 &amp;&amp; attempts &lt; maxAttempts) {
            log(`Caught an error before anything closed, trying ${maxAttempts - attempts} more time(s).`)
            attempts++;
          } else {
            throw innerErr;
          }
        }
      }
    } else {
      throw Error(`No${appNameForLog} notifications found...`);
    }
  } catch (err) {
    logError(err);
    logError(err.message);
    getLogLines();
    throw err;
  }

  return getLogLines();
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>897F4955-18F9-4087-90E1-7B414F0D269E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>tell application "System Events"
       try
               repeat
                       set _groups to groups of UI element 1 of scroll area 1 of group 1 of window "Notification Center" of application process "NotificationCenter"
                       set numGroups to number of _groups
                       if numGroups = 0 then
                               exit repeat
                       end if
                       repeat with _group in _groups
                               set _actions to actions of _group
                               set actionPerformed to false
                               repeat with _action in _actions
                                       if description of _action is in {"Close", "Clear All", "Schließen", "Alle entfernen", "Cerrar", "Borrar todo", "关闭", "清除全部", "Fermer", "Tout effacer", "Закрыть", "Очистить все", "إغلاق", "مسح الكل", "Fechar", "Limpar tudo", "閉じる", "すべてクリア", "बंद करें", "सभी हटाएं", "Zamknij", "Wyczyść wszystko"} then
                                               perform _action
                                               set actionPerformed to true
                                               exit repeat
                                       end if
                               end repeat
                               if actionPerformed then
                                       exit repeat
                               end if
                       end repeat
               end repeat
       end try
end tell</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>51D1D93C-ADA4-4B25-B6F0-B294C4F34E0F</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>focusedappvariable</key>
				<false/>
				<key>focusedappvariablename</key>
				<string></string>
				<key>hotkey</key>
				<integer>0</integer>
				<key>hotmod</key>
				<integer>0</integer>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>5AF4E8CC-EAC0-4851-B52C-88EE3DCA43A4</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>dismiss</string>
				<key>subtext</key>
				<string></string>
				<key>text</key>
				<string>Dismiss all notifications</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>59F529A1-09F5-492B-A0D6-B7180808B960</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>tell application "System Events"
    try
        set _groups to groups of UI element 1 of scroll area 1 of group 1 of window "Notification Center" of application process "NotificationCenter"
        
        set closeActions to {"Close", "Clear All", "Schließen", "Alle entfernen", "Cerrar", "Borrar todo", "关闭", "清除全部", "Fermer", "Tout effacer", "Закрыть", "Очистить все", "إغلاق", "مسح الكل", "Fechar", "Limpar tudo", "閉じる", "すべてクリア", "बंद करें", "सभी हटाएं", "Zamknij", "Wyczyść wszystko"}
        
        repeat with _group in _groups
            set _actions to actions of _group
            
            repeat with _action in _actions
                if description of _action is in closeActions then
                    perform _action
                    exit repeat
                end if
            end repeat
        end repeat
   -- on error errMsg
     --   display dialog "Error: " &amp; errMsg
    end try
end tell</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>A848F611-85BB-405D-A62A-572FD5D0F2AB</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>-- macOS 15 Sequoia
-- Set of close action phrases in multiple languages
on closeActions()
    return {"Close", "Clear All", "Schließen", "Alle entfernen", "Cerrar", "Borrar todo", "关闭", "清除全部", "Fermer", "Tout effacer", "Закрыть", "Очистить все", "إغلاق", "مسح الكل", "Fechar", "Limpar tudo", "閉じる", "すべてクリア", "बंद करें", "सभी हटाएं", "Zamknij", "Wyczyść wszystko"}
end closeActions

-- Function to perform close action on a given element
on closeNotification(elemRef)
    tell application "System Events"
        set closeActionSet to my closeActions()
        repeat with act in (get actions of elemRef)
            if description of act is in closeActionSet then
                perform act
                return true
            end if
        end repeat
    end tell
    return false
end closeNotification

-- Function to recursively search for and close notifications
on searchAndCloseNotifications(elemRef)
    tell application "System Events"
        set didClose to false
        
        -- Try to close the current element if it's a notification
        if my closeNotification(elemRef) then
            return true
        end if
        
        -- If the element has subelements, search them
        try
            set subElements to entire contents of elemRef
            repeat with subElem in subElements
                if my searchAndCloseNotifications(subElem) then
                    return true
                end if
            end repeat
        end try
    end tell
    return false
end searchAndCloseNotifications

-- Main script to clear notifications
on run
    tell application "System Events"
        if not (exists process "NotificationCenter") then
            log "NotificationCenter process not found"
            return
        end if
        
        tell process "NotificationCenter"
            if not (exists window "Notification Center") then
                log "Notification Center window not found"
                return
            end if
            
            set notificationWindow to window "Notification Center"
            
            -- Main loop to clear notifications
            repeat
                try
                    if not my searchAndCloseNotifications(notificationWindow) then
                        -- If no notifications were closed, we're done
                        exit repeat
                    end if
                    
                    -- Small delay to avoid overwhelming the system
                    delay 0.5
                on error errMsg
                    -- If an error occurs, log it and exit the loop
                    log "Error: " &amp; errMsg
                    exit repeat
                end try
            end repeat
        end tell
    end tell
end run</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>383F8608-0870-4765-8111-86D6EC9928F2</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>383F8608-0870-4765-8111-86D6EC9928F2</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>xpos</key>
			<real>260</real>
			<key>ypos</key>
			<real>445</real>
		</dict>
		<key>51D1D93C-ADA4-4B25-B6F0-B294C4F34E0F</key>
		<dict>
			<key>xpos</key>
			<real>260</real>
			<key>ypos</key>
			<real>155</real>
		</dict>
		<key>59F529A1-09F5-492B-A0D6-B7180808B960</key>
		<dict>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>305</real>
		</dict>
		<key>5AF4E8CC-EAC0-4851-B52C-88EE3DCA43A4</key>
		<dict>
			<key>xpos</key>
			<real>30</real>
			<key>ypos</key>
			<real>155</real>
		</dict>
		<key>897F4955-18F9-4087-90E1-7B414F0D269E</key>
		<dict>
			<key>xpos</key>
			<real>260</real>
			<key>ypos</key>
			<real>15</real>
		</dict>
		<key>A848F611-85BB-405D-A62A-572FD5D0F2AB</key>
		<dict>
			<key>xpos</key>
			<real>260</real>
			<key>ypos</key>
			<real>305</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array/>
	<key>webaddress</key>
	<string></string>
</dict>
</plist>
